/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// AliasParameters defines the desired state of Alias
type AliasParameters struct {
	// Region is which region the Alias will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// Specifies the alias name. This value must begin with alias/ followed by a
	// name, such as alias/ExampleAlias. The alias name cannot begin with alias/aws/.
	// The alias/aws/ prefix is reserved for AWS managed CMKs.
	// +kubebuilder:validation:Required
	AliasName             *string `json:"aliasName"`
	CustomAliasParameters `json:",inline"`
}

// AliasSpec defines the desired state of Alias
type AliasSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AliasParameters `json:"forProvider"`
}

// AliasObservation defines the observed state of Alias
type AliasObservation struct {
}

// AliasStatus defines the observed state of Alias.
type AliasStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AliasObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// Alias is the Schema for the Aliases API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Alias struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AliasSpec   `json:"spec,omitempty"`
	Status            AliasStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AliasList contains a list of Aliases
type AliasList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Alias `json:"items"`
}

// Repository type metadata.
var (
	AliasKind             = "Alias"
	AliasGroupKind        = schema.GroupKind{Group: Group, Kind: AliasKind}.String()
	AliasKindAPIVersion   = AliasKind + "." + GroupVersion.String()
	AliasGroupVersionKind = GroupVersion.WithKind(AliasKind)
)

func init() {
	SchemeBuilder.Register(&Alias{}, &AliasList{})
}
